
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Resume` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Resume
 * 
 */
export type ResumeModel = runtime.Types.Result.DefaultSelection<Prisma.$ResumePayload>

export type AggregateResume = {
  _count: ResumeCountAggregateOutputType | null
  _min: ResumeMinAggregateOutputType | null
  _max: ResumeMaxAggregateOutputType | null
}

export type ResumeMinAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  name: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ResumeMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  name: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ResumeCountAggregateOutputType = {
  id: number
  userId: number
  title: number
  name: number
  label: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ResumeMinAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  name?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type ResumeMaxAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  name?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type ResumeCountAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  name?: true
  label?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ResumeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Resume to aggregate.
   */
  where?: Prisma.ResumeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Resumes to fetch.
   */
  orderBy?: Prisma.ResumeOrderByWithRelationInput | Prisma.ResumeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ResumeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Resumes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Resumes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Resumes
  **/
  _count?: true | ResumeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ResumeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ResumeMaxAggregateInputType
}

export type GetResumeAggregateType<T extends ResumeAggregateArgs> = {
      [P in keyof T & keyof AggregateResume]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResume[P]>
    : Prisma.GetScalarType<T[P], AggregateResume[P]>
}




export type ResumeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResumeWhereInput
  orderBy?: Prisma.ResumeOrderByWithAggregationInput | Prisma.ResumeOrderByWithAggregationInput[]
  by: Prisma.ResumeScalarFieldEnum[] | Prisma.ResumeScalarFieldEnum
  having?: Prisma.ResumeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ResumeCountAggregateInputType | true
  _min?: ResumeMinAggregateInputType
  _max?: ResumeMaxAggregateInputType
}

export type ResumeGroupByOutputType = {
  id: string
  userId: string
  title: string
  name: string
  label: string
  createdAt: Date
  updatedAt: Date
  _count: ResumeCountAggregateOutputType | null
  _min: ResumeMinAggregateOutputType | null
  _max: ResumeMaxAggregateOutputType | null
}

type GetResumeGroupByPayload<T extends ResumeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResumeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ResumeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResumeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResumeGroupByOutputType[P]>
      }
    >
  > 



export type ResumeWhereInput = {
  AND?: Prisma.ResumeWhereInput | Prisma.ResumeWhereInput[]
  OR?: Prisma.ResumeWhereInput[]
  NOT?: Prisma.ResumeWhereInput | Prisma.ResumeWhereInput[]
  id?: Prisma.StringFilter<"Resume"> | string
  userId?: Prisma.StringFilter<"Resume"> | string
  title?: Prisma.StringFilter<"Resume"> | string
  name?: Prisma.StringFilter<"Resume"> | string
  label?: Prisma.StringFilter<"Resume"> | string
  createdAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ResumeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type ResumeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ResumeWhereInput | Prisma.ResumeWhereInput[]
  OR?: Prisma.ResumeWhereInput[]
  NOT?: Prisma.ResumeWhereInput | Prisma.ResumeWhereInput[]
  userId?: Prisma.StringFilter<"Resume"> | string
  title?: Prisma.StringFilter<"Resume"> | string
  name?: Prisma.StringFilter<"Resume"> | string
  label?: Prisma.StringFilter<"Resume"> | string
  createdAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ResumeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ResumeCountOrderByAggregateInput
  _max?: Prisma.ResumeMaxOrderByAggregateInput
  _min?: Prisma.ResumeMinOrderByAggregateInput
}

export type ResumeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ResumeScalarWhereWithAggregatesInput | Prisma.ResumeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ResumeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ResumeScalarWhereWithAggregatesInput | Prisma.ResumeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Resume"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Resume"> | string
  title?: Prisma.StringWithAggregatesFilter<"Resume"> | string
  name?: Prisma.StringWithAggregatesFilter<"Resume"> | string
  label?: Prisma.StringWithAggregatesFilter<"Resume"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Resume"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Resume"> | Date | string
}

export type ResumeCreateInput = {
  id?: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutResumesInput
}

export type ResumeUncheckedCreateInput = {
  id?: string
  userId: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResumeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutResumesNestedInput
}

export type ResumeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeCreateManyInput = {
  id?: string
  userId: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResumeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeListRelationFilter = {
  every?: Prisma.ResumeWhereInput
  some?: Prisma.ResumeWhereInput
  none?: Prisma.ResumeWhereInput
}

export type ResumeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ResumeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResumeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResumeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  name?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResumeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput> | Prisma.ResumeCreateWithoutUserInput[] | Prisma.ResumeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ResumeCreateOrConnectWithoutUserInput | Prisma.ResumeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ResumeCreateManyUserInputEnvelope
  connect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
}

export type ResumeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput> | Prisma.ResumeCreateWithoutUserInput[] | Prisma.ResumeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ResumeCreateOrConnectWithoutUserInput | Prisma.ResumeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ResumeCreateManyUserInputEnvelope
  connect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
}

export type ResumeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput> | Prisma.ResumeCreateWithoutUserInput[] | Prisma.ResumeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ResumeCreateOrConnectWithoutUserInput | Prisma.ResumeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ResumeUpsertWithWhereUniqueWithoutUserInput | Prisma.ResumeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ResumeCreateManyUserInputEnvelope
  set?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  disconnect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  delete?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  connect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  update?: Prisma.ResumeUpdateWithWhereUniqueWithoutUserInput | Prisma.ResumeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ResumeUpdateManyWithWhereWithoutUserInput | Prisma.ResumeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ResumeScalarWhereInput | Prisma.ResumeScalarWhereInput[]
}

export type ResumeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput> | Prisma.ResumeCreateWithoutUserInput[] | Prisma.ResumeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ResumeCreateOrConnectWithoutUserInput | Prisma.ResumeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ResumeUpsertWithWhereUniqueWithoutUserInput | Prisma.ResumeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ResumeCreateManyUserInputEnvelope
  set?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  disconnect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  delete?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  connect?: Prisma.ResumeWhereUniqueInput | Prisma.ResumeWhereUniqueInput[]
  update?: Prisma.ResumeUpdateWithWhereUniqueWithoutUserInput | Prisma.ResumeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ResumeUpdateManyWithWhereWithoutUserInput | Prisma.ResumeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ResumeScalarWhereInput | Prisma.ResumeScalarWhereInput[]
}

export type ResumeCreateWithoutUserInput = {
  id?: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResumeUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResumeCreateOrConnectWithoutUserInput = {
  where: Prisma.ResumeWhereUniqueInput
  create: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput>
}

export type ResumeCreateManyUserInputEnvelope = {
  data: Prisma.ResumeCreateManyUserInput | Prisma.ResumeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ResumeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ResumeWhereUniqueInput
  update: Prisma.XOR<Prisma.ResumeUpdateWithoutUserInput, Prisma.ResumeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ResumeCreateWithoutUserInput, Prisma.ResumeUncheckedCreateWithoutUserInput>
}

export type ResumeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ResumeWhereUniqueInput
  data: Prisma.XOR<Prisma.ResumeUpdateWithoutUserInput, Prisma.ResumeUncheckedUpdateWithoutUserInput>
}

export type ResumeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ResumeScalarWhereInput
  data: Prisma.XOR<Prisma.ResumeUpdateManyMutationInput, Prisma.ResumeUncheckedUpdateManyWithoutUserInput>
}

export type ResumeScalarWhereInput = {
  AND?: Prisma.ResumeScalarWhereInput | Prisma.ResumeScalarWhereInput[]
  OR?: Prisma.ResumeScalarWhereInput[]
  NOT?: Prisma.ResumeScalarWhereInput | Prisma.ResumeScalarWhereInput[]
  id?: Prisma.StringFilter<"Resume"> | string
  userId?: Prisma.StringFilter<"Resume"> | string
  title?: Prisma.StringFilter<"Resume"> | string
  name?: Prisma.StringFilter<"Resume"> | string
  label?: Prisma.StringFilter<"Resume"> | string
  createdAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Resume"> | Date | string
}

export type ResumeCreateManyUserInput = {
  id?: string
  title: string
  name: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResumeUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResumeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ResumeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  name?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resume"]>

export type ResumeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  name?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resume"]>

export type ResumeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  name?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resume"]>

export type ResumeSelectScalar = {
  id?: boolean
  userId?: boolean
  title?: boolean
  name?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ResumeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "title" | "name" | "label" | "createdAt" | "updatedAt", ExtArgs["result"]["resume"]>
export type ResumeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ResumeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ResumeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ResumePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Resume"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    title: string
    name: string
    label: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["resume"]>
  composites: {}
}

export type ResumeGetPayload<S extends boolean | null | undefined | ResumeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ResumePayload, S>

export type ResumeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ResumeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ResumeCountAggregateInputType | true
  }

export interface ResumeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resume'], meta: { name: 'Resume' } }
  /**
   * Find zero or one Resume that matches the filter.
   * @param {ResumeFindUniqueArgs} args - Arguments to find a Resume
   * @example
   * // Get one Resume
   * const resume = await prisma.resume.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResumeFindUniqueArgs>(args: Prisma.SelectSubset<T, ResumeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Resume that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResumeFindUniqueOrThrowArgs} args - Arguments to find a Resume
   * @example
   * // Get one Resume
   * const resume = await prisma.resume.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResumeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ResumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Resume that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeFindFirstArgs} args - Arguments to find a Resume
   * @example
   * // Get one Resume
   * const resume = await prisma.resume.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResumeFindFirstArgs>(args?: Prisma.SelectSubset<T, ResumeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Resume that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeFindFirstOrThrowArgs} args - Arguments to find a Resume
   * @example
   * // Get one Resume
   * const resume = await prisma.resume.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResumeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ResumeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Resumes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Resumes
   * const resumes = await prisma.resume.findMany()
   * 
   * // Get first 10 Resumes
   * const resumes = await prisma.resume.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const resumeWithIdOnly = await prisma.resume.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ResumeFindManyArgs>(args?: Prisma.SelectSubset<T, ResumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Resume.
   * @param {ResumeCreateArgs} args - Arguments to create a Resume.
   * @example
   * // Create one Resume
   * const Resume = await prisma.resume.create({
   *   data: {
   *     // ... data to create a Resume
   *   }
   * })
   * 
   */
  create<T extends ResumeCreateArgs>(args: Prisma.SelectSubset<T, ResumeCreateArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Resumes.
   * @param {ResumeCreateManyArgs} args - Arguments to create many Resumes.
   * @example
   * // Create many Resumes
   * const resume = await prisma.resume.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ResumeCreateManyArgs>(args?: Prisma.SelectSubset<T, ResumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Resumes and returns the data saved in the database.
   * @param {ResumeCreateManyAndReturnArgs} args - Arguments to create many Resumes.
   * @example
   * // Create many Resumes
   * const resume = await prisma.resume.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Resumes and only return the `id`
   * const resumeWithIdOnly = await prisma.resume.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ResumeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ResumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Resume.
   * @param {ResumeDeleteArgs} args - Arguments to delete one Resume.
   * @example
   * // Delete one Resume
   * const Resume = await prisma.resume.delete({
   *   where: {
   *     // ... filter to delete one Resume
   *   }
   * })
   * 
   */
  delete<T extends ResumeDeleteArgs>(args: Prisma.SelectSubset<T, ResumeDeleteArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Resume.
   * @param {ResumeUpdateArgs} args - Arguments to update one Resume.
   * @example
   * // Update one Resume
   * const resume = await prisma.resume.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ResumeUpdateArgs>(args: Prisma.SelectSubset<T, ResumeUpdateArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Resumes.
   * @param {ResumeDeleteManyArgs} args - Arguments to filter Resumes to delete.
   * @example
   * // Delete a few Resumes
   * const { count } = await prisma.resume.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ResumeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ResumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Resumes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Resumes
   * const resume = await prisma.resume.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ResumeUpdateManyArgs>(args: Prisma.SelectSubset<T, ResumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Resumes and returns the data updated in the database.
   * @param {ResumeUpdateManyAndReturnArgs} args - Arguments to update many Resumes.
   * @example
   * // Update many Resumes
   * const resume = await prisma.resume.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Resumes and only return the `id`
   * const resumeWithIdOnly = await prisma.resume.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ResumeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ResumeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Resume.
   * @param {ResumeUpsertArgs} args - Arguments to update or create a Resume.
   * @example
   * // Update or create a Resume
   * const resume = await prisma.resume.upsert({
   *   create: {
   *     // ... data to create a Resume
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Resume we want to update
   *   }
   * })
   */
  upsert<T extends ResumeUpsertArgs>(args: Prisma.SelectSubset<T, ResumeUpsertArgs<ExtArgs>>): Prisma.Prisma__ResumeClient<runtime.Types.Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Resumes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeCountArgs} args - Arguments to filter Resumes to count.
   * @example
   * // Count the number of Resumes
   * const count = await prisma.resume.count({
   *   where: {
   *     // ... the filter for the Resumes we want to count
   *   }
   * })
  **/
  count<T extends ResumeCountArgs>(
    args?: Prisma.Subset<T, ResumeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResumeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Resume.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ResumeAggregateArgs>(args: Prisma.Subset<T, ResumeAggregateArgs>): Prisma.PrismaPromise<GetResumeAggregateType<T>>

  /**
   * Group by Resume.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResumeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ResumeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResumeGroupByArgs['orderBy'] }
      : { orderBy?: ResumeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Resume model
 */
readonly fields: ResumeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Resume.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResumeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Resume model
 */
export interface ResumeFieldRefs {
  readonly id: Prisma.FieldRef<"Resume", 'String'>
  readonly userId: Prisma.FieldRef<"Resume", 'String'>
  readonly title: Prisma.FieldRef<"Resume", 'String'>
  readonly name: Prisma.FieldRef<"Resume", 'String'>
  readonly label: Prisma.FieldRef<"Resume", 'String'>
  readonly createdAt: Prisma.FieldRef<"Resume", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Resume", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Resume findUnique
 */
export type ResumeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter, which Resume to fetch.
   */
  where: Prisma.ResumeWhereUniqueInput
}

/**
 * Resume findUniqueOrThrow
 */
export type ResumeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter, which Resume to fetch.
   */
  where: Prisma.ResumeWhereUniqueInput
}

/**
 * Resume findFirst
 */
export type ResumeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter, which Resume to fetch.
   */
  where?: Prisma.ResumeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Resumes to fetch.
   */
  orderBy?: Prisma.ResumeOrderByWithRelationInput | Prisma.ResumeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Resumes.
   */
  cursor?: Prisma.ResumeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Resumes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Resumes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Resumes.
   */
  distinct?: Prisma.ResumeScalarFieldEnum | Prisma.ResumeScalarFieldEnum[]
}

/**
 * Resume findFirstOrThrow
 */
export type ResumeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter, which Resume to fetch.
   */
  where?: Prisma.ResumeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Resumes to fetch.
   */
  orderBy?: Prisma.ResumeOrderByWithRelationInput | Prisma.ResumeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Resumes.
   */
  cursor?: Prisma.ResumeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Resumes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Resumes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Resumes.
   */
  distinct?: Prisma.ResumeScalarFieldEnum | Prisma.ResumeScalarFieldEnum[]
}

/**
 * Resume findMany
 */
export type ResumeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter, which Resumes to fetch.
   */
  where?: Prisma.ResumeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Resumes to fetch.
   */
  orderBy?: Prisma.ResumeOrderByWithRelationInput | Prisma.ResumeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Resumes.
   */
  cursor?: Prisma.ResumeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Resumes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Resumes.
   */
  skip?: number
  distinct?: Prisma.ResumeScalarFieldEnum | Prisma.ResumeScalarFieldEnum[]
}

/**
 * Resume create
 */
export type ResumeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * The data needed to create a Resume.
   */
  data: Prisma.XOR<Prisma.ResumeCreateInput, Prisma.ResumeUncheckedCreateInput>
}

/**
 * Resume createMany
 */
export type ResumeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Resumes.
   */
  data: Prisma.ResumeCreateManyInput | Prisma.ResumeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Resume createManyAndReturn
 */
export type ResumeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * The data used to create many Resumes.
   */
  data: Prisma.ResumeCreateManyInput | Prisma.ResumeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Resume update
 */
export type ResumeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * The data needed to update a Resume.
   */
  data: Prisma.XOR<Prisma.ResumeUpdateInput, Prisma.ResumeUncheckedUpdateInput>
  /**
   * Choose, which Resume to update.
   */
  where: Prisma.ResumeWhereUniqueInput
}

/**
 * Resume updateMany
 */
export type ResumeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Resumes.
   */
  data: Prisma.XOR<Prisma.ResumeUpdateManyMutationInput, Prisma.ResumeUncheckedUpdateManyInput>
  /**
   * Filter which Resumes to update
   */
  where?: Prisma.ResumeWhereInput
  /**
   * Limit how many Resumes to update.
   */
  limit?: number
}

/**
 * Resume updateManyAndReturn
 */
export type ResumeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * The data used to update Resumes.
   */
  data: Prisma.XOR<Prisma.ResumeUpdateManyMutationInput, Prisma.ResumeUncheckedUpdateManyInput>
  /**
   * Filter which Resumes to update
   */
  where?: Prisma.ResumeWhereInput
  /**
   * Limit how many Resumes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Resume upsert
 */
export type ResumeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * The filter to search for the Resume to update in case it exists.
   */
  where: Prisma.ResumeWhereUniqueInput
  /**
   * In case the Resume found by the `where` argument doesn't exist, create a new Resume with this data.
   */
  create: Prisma.XOR<Prisma.ResumeCreateInput, Prisma.ResumeUncheckedCreateInput>
  /**
   * In case the Resume was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ResumeUpdateInput, Prisma.ResumeUncheckedUpdateInput>
}

/**
 * Resume delete
 */
export type ResumeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
  /**
   * Filter which Resume to delete.
   */
  where: Prisma.ResumeWhereUniqueInput
}

/**
 * Resume deleteMany
 */
export type ResumeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Resumes to delete
   */
  where?: Prisma.ResumeWhereInput
  /**
   * Limit how many Resumes to delete.
   */
  limit?: number
}

/**
 * Resume without action
 */
export type ResumeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Resume
   */
  select?: Prisma.ResumeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Resume
   */
  omit?: Prisma.ResumeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResumeInclude<ExtArgs> | null
}
