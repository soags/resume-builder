
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `UserAuth` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model UserAuth
 * 
 */
export type UserAuthModel = runtime.Types.Result.DefaultSelection<Prisma.$UserAuthPayload>

export type AggregateUserAuth = {
  _count: UserAuthCountAggregateOutputType | null
  _min: UserAuthMinAggregateOutputType | null
  _max: UserAuthMaxAggregateOutputType | null
}

export type UserAuthMinAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: string | null
  providerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserAuthMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: string | null
  providerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserAuthCountAggregateOutputType = {
  id: number
  userId: number
  provider: number
  providerId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserAuthMinAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerId?: true
  createdAt?: true
  updatedAt?: true
}

export type UserAuthMaxAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerId?: true
  createdAt?: true
  updatedAt?: true
}

export type UserAuthCountAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  providerId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserAuthAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAuth to aggregate.
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAuths to fetch.
   */
  orderBy?: Prisma.UserAuthOrderByWithRelationInput | Prisma.UserAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserAuths
  **/
  _count?: true | UserAuthCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserAuthMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserAuthMaxAggregateInputType
}

export type GetUserAuthAggregateType<T extends UserAuthAggregateArgs> = {
      [P in keyof T & keyof AggregateUserAuth]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserAuth[P]>
    : Prisma.GetScalarType<T[P], AggregateUserAuth[P]>
}




export type UserAuthGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAuthWhereInput
  orderBy?: Prisma.UserAuthOrderByWithAggregationInput | Prisma.UserAuthOrderByWithAggregationInput[]
  by: Prisma.UserAuthScalarFieldEnum[] | Prisma.UserAuthScalarFieldEnum
  having?: Prisma.UserAuthScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserAuthCountAggregateInputType | true
  _min?: UserAuthMinAggregateInputType
  _max?: UserAuthMaxAggregateInputType
}

export type UserAuthGroupByOutputType = {
  id: string
  userId: string
  provider: string
  providerId: string
  createdAt: Date
  updatedAt: Date
  _count: UserAuthCountAggregateOutputType | null
  _min: UserAuthMinAggregateOutputType | null
  _max: UserAuthMaxAggregateOutputType | null
}

type GetUserAuthGroupByPayload<T extends UserAuthGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserAuthGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserAuthGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserAuthGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserAuthGroupByOutputType[P]>
      }
    >
  > 



export type UserAuthWhereInput = {
  AND?: Prisma.UserAuthWhereInput | Prisma.UserAuthWhereInput[]
  OR?: Prisma.UserAuthWhereInput[]
  NOT?: Prisma.UserAuthWhereInput | Prisma.UserAuthWhereInput[]
  id?: Prisma.StringFilter<"UserAuth"> | string
  userId?: Prisma.StringFilter<"UserAuth"> | string
  provider?: Prisma.StringFilter<"UserAuth"> | string
  providerId?: Prisma.StringFilter<"UserAuth"> | string
  createdAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserAuthOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserAuthWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserAuthWhereInput | Prisma.UserAuthWhereInput[]
  OR?: Prisma.UserAuthWhereInput[]
  NOT?: Prisma.UserAuthWhereInput | Prisma.UserAuthWhereInput[]
  userId?: Prisma.StringFilter<"UserAuth"> | string
  provider?: Prisma.StringFilter<"UserAuth"> | string
  providerId?: Prisma.StringFilter<"UserAuth"> | string
  createdAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type UserAuthOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserAuthCountOrderByAggregateInput
  _max?: Prisma.UserAuthMaxOrderByAggregateInput
  _min?: Prisma.UserAuthMinOrderByAggregateInput
}

export type UserAuthScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserAuthScalarWhereWithAggregatesInput | Prisma.UserAuthScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserAuthScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserAuthScalarWhereWithAggregatesInput | Prisma.UserAuthScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserAuth"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserAuth"> | string
  provider?: Prisma.StringWithAggregatesFilter<"UserAuth"> | string
  providerId?: Prisma.StringWithAggregatesFilter<"UserAuth"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserAuth"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserAuth"> | Date | string
}

export type UserAuthCreateInput = {
  id?: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAuthsInput
}

export type UserAuthUncheckedCreateInput = {
  id?: string
  userId: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAuthUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAuthsNestedInput
}

export type UserAuthUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAuthCreateManyInput = {
  id?: string
  userId: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAuthUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAuthUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAuthListRelationFilter = {
  every?: Prisma.UserAuthWhereInput
  some?: Prisma.UserAuthWhereInput
  none?: Prisma.UserAuthWhereInput
}

export type UserAuthOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserAuthCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAuthMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAuthMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAuthCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput> | Prisma.UserAuthCreateWithoutUserInput[] | Prisma.UserAuthUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAuthCreateOrConnectWithoutUserInput | Prisma.UserAuthCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserAuthCreateManyUserInputEnvelope
  connect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
}

export type UserAuthUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput> | Prisma.UserAuthCreateWithoutUserInput[] | Prisma.UserAuthUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAuthCreateOrConnectWithoutUserInput | Prisma.UserAuthCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserAuthCreateManyUserInputEnvelope
  connect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
}

export type UserAuthUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput> | Prisma.UserAuthCreateWithoutUserInput[] | Prisma.UserAuthUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAuthCreateOrConnectWithoutUserInput | Prisma.UserAuthCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserAuthUpsertWithWhereUniqueWithoutUserInput | Prisma.UserAuthUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserAuthCreateManyUserInputEnvelope
  set?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  disconnect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  delete?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  connect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  update?: Prisma.UserAuthUpdateWithWhereUniqueWithoutUserInput | Prisma.UserAuthUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserAuthUpdateManyWithWhereWithoutUserInput | Prisma.UserAuthUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserAuthScalarWhereInput | Prisma.UserAuthScalarWhereInput[]
}

export type UserAuthUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput> | Prisma.UserAuthCreateWithoutUserInput[] | Prisma.UserAuthUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserAuthCreateOrConnectWithoutUserInput | Prisma.UserAuthCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserAuthUpsertWithWhereUniqueWithoutUserInput | Prisma.UserAuthUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserAuthCreateManyUserInputEnvelope
  set?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  disconnect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  delete?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  connect?: Prisma.UserAuthWhereUniqueInput | Prisma.UserAuthWhereUniqueInput[]
  update?: Prisma.UserAuthUpdateWithWhereUniqueWithoutUserInput | Prisma.UserAuthUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserAuthUpdateManyWithWhereWithoutUserInput | Prisma.UserAuthUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserAuthScalarWhereInput | Prisma.UserAuthScalarWhereInput[]
}

export type UserAuthCreateWithoutUserInput = {
  id?: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAuthUncheckedCreateWithoutUserInput = {
  id?: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAuthCreateOrConnectWithoutUserInput = {
  where: Prisma.UserAuthWhereUniqueInput
  create: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput>
}

export type UserAuthCreateManyUserInputEnvelope = {
  data: Prisma.UserAuthCreateManyUserInput | Prisma.UserAuthCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserAuthUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserAuthWhereUniqueInput
  update: Prisma.XOR<Prisma.UserAuthUpdateWithoutUserInput, Prisma.UserAuthUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserAuthCreateWithoutUserInput, Prisma.UserAuthUncheckedCreateWithoutUserInput>
}

export type UserAuthUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserAuthWhereUniqueInput
  data: Prisma.XOR<Prisma.UserAuthUpdateWithoutUserInput, Prisma.UserAuthUncheckedUpdateWithoutUserInput>
}

export type UserAuthUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserAuthScalarWhereInput
  data: Prisma.XOR<Prisma.UserAuthUpdateManyMutationInput, Prisma.UserAuthUncheckedUpdateManyWithoutUserInput>
}

export type UserAuthScalarWhereInput = {
  AND?: Prisma.UserAuthScalarWhereInput | Prisma.UserAuthScalarWhereInput[]
  OR?: Prisma.UserAuthScalarWhereInput[]
  NOT?: Prisma.UserAuthScalarWhereInput | Prisma.UserAuthScalarWhereInput[]
  id?: Prisma.StringFilter<"UserAuth"> | string
  userId?: Prisma.StringFilter<"UserAuth"> | string
  provider?: Prisma.StringFilter<"UserAuth"> | string
  providerId?: Prisma.StringFilter<"UserAuth"> | string
  createdAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserAuth"> | Date | string
}

export type UserAuthCreateManyUserInput = {
  id?: string
  provider: string
  providerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserAuthUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAuthUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserAuthUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserAuthSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAuth"]>

export type UserAuthSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAuth"]>

export type UserAuthSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userAuth"]>

export type UserAuthSelectScalar = {
  id?: boolean
  userId?: boolean
  provider?: boolean
  providerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserAuthOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "provider" | "providerId" | "createdAt" | "updatedAt", ExtArgs["result"]["userAuth"]>
export type UserAuthInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAuthIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserAuthIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserAuthPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserAuth"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    provider: string
    providerId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userAuth"]>
  composites: {}
}

export type UserAuthGetPayload<S extends boolean | null | undefined | UserAuthDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserAuthPayload, S>

export type UserAuthCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserAuthCountAggregateInputType | true
  }

export interface UserAuthDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAuth'], meta: { name: 'UserAuth' } }
  /**
   * Find zero or one UserAuth that matches the filter.
   * @param {UserAuthFindUniqueArgs} args - Arguments to find a UserAuth
   * @example
   * // Get one UserAuth
   * const userAuth = await prisma.userAuth.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserAuthFindUniqueArgs>(args: Prisma.SelectSubset<T, UserAuthFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserAuth that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserAuthFindUniqueOrThrowArgs} args - Arguments to find a UserAuth
   * @example
   * // Get one UserAuth
   * const userAuth = await prisma.userAuth.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserAuthFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAuth that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthFindFirstArgs} args - Arguments to find a UserAuth
   * @example
   * // Get one UserAuth
   * const userAuth = await prisma.userAuth.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserAuthFindFirstArgs>(args?: Prisma.SelectSubset<T, UserAuthFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserAuth that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthFindFirstOrThrowArgs} args - Arguments to find a UserAuth
   * @example
   * // Get one UserAuth
   * const userAuth = await prisma.userAuth.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserAuthFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserAuths that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserAuths
   * const userAuths = await prisma.userAuth.findMany()
   * 
   * // Get first 10 UserAuths
   * const userAuths = await prisma.userAuth.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userAuthWithIdOnly = await prisma.userAuth.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserAuthFindManyArgs>(args?: Prisma.SelectSubset<T, UserAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserAuth.
   * @param {UserAuthCreateArgs} args - Arguments to create a UserAuth.
   * @example
   * // Create one UserAuth
   * const UserAuth = await prisma.userAuth.create({
   *   data: {
   *     // ... data to create a UserAuth
   *   }
   * })
   * 
   */
  create<T extends UserAuthCreateArgs>(args: Prisma.SelectSubset<T, UserAuthCreateArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserAuths.
   * @param {UserAuthCreateManyArgs} args - Arguments to create many UserAuths.
   * @example
   * // Create many UserAuths
   * const userAuth = await prisma.userAuth.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserAuthCreateManyArgs>(args?: Prisma.SelectSubset<T, UserAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserAuths and returns the data saved in the database.
   * @param {UserAuthCreateManyAndReturnArgs} args - Arguments to create many UserAuths.
   * @example
   * // Create many UserAuths
   * const userAuth = await prisma.userAuth.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserAuths and only return the `id`
   * const userAuthWithIdOnly = await prisma.userAuth.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserAuthCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserAuthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserAuth.
   * @param {UserAuthDeleteArgs} args - Arguments to delete one UserAuth.
   * @example
   * // Delete one UserAuth
   * const UserAuth = await prisma.userAuth.delete({
   *   where: {
   *     // ... filter to delete one UserAuth
   *   }
   * })
   * 
   */
  delete<T extends UserAuthDeleteArgs>(args: Prisma.SelectSubset<T, UserAuthDeleteArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserAuth.
   * @param {UserAuthUpdateArgs} args - Arguments to update one UserAuth.
   * @example
   * // Update one UserAuth
   * const userAuth = await prisma.userAuth.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserAuthUpdateArgs>(args: Prisma.SelectSubset<T, UserAuthUpdateArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserAuths.
   * @param {UserAuthDeleteManyArgs} args - Arguments to filter UserAuths to delete.
   * @example
   * // Delete a few UserAuths
   * const { count } = await prisma.userAuth.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserAuthDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAuths.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserAuths
   * const userAuth = await prisma.userAuth.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserAuthUpdateManyArgs>(args: Prisma.SelectSubset<T, UserAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserAuths and returns the data updated in the database.
   * @param {UserAuthUpdateManyAndReturnArgs} args - Arguments to update many UserAuths.
   * @example
   * // Update many UserAuths
   * const userAuth = await prisma.userAuth.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserAuths and only return the `id`
   * const userAuthWithIdOnly = await prisma.userAuth.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserAuthUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserAuthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserAuth.
   * @param {UserAuthUpsertArgs} args - Arguments to update or create a UserAuth.
   * @example
   * // Update or create a UserAuth
   * const userAuth = await prisma.userAuth.upsert({
   *   create: {
   *     // ... data to create a UserAuth
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserAuth we want to update
   *   }
   * })
   */
  upsert<T extends UserAuthUpsertArgs>(args: Prisma.SelectSubset<T, UserAuthUpsertArgs<ExtArgs>>): Prisma.Prisma__UserAuthClient<runtime.Types.Result.GetResult<Prisma.$UserAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserAuths.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthCountArgs} args - Arguments to filter UserAuths to count.
   * @example
   * // Count the number of UserAuths
   * const count = await prisma.userAuth.count({
   *   where: {
   *     // ... the filter for the UserAuths we want to count
   *   }
   * })
  **/
  count<T extends UserAuthCountArgs>(
    args?: Prisma.Subset<T, UserAuthCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserAuthCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserAuth.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAuthAggregateArgs>(args: Prisma.Subset<T, UserAuthAggregateArgs>): Prisma.PrismaPromise<GetUserAuthAggregateType<T>>

  /**
   * Group by UserAuth.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAuthGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserAuthGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserAuthGroupByArgs['orderBy'] }
      : { orderBy?: UserAuthGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserAuth model
 */
readonly fields: UserAuthFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserAuth.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserAuthClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserAuth model
 */
export interface UserAuthFieldRefs {
  readonly id: Prisma.FieldRef<"UserAuth", 'String'>
  readonly userId: Prisma.FieldRef<"UserAuth", 'String'>
  readonly provider: Prisma.FieldRef<"UserAuth", 'String'>
  readonly providerId: Prisma.FieldRef<"UserAuth", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserAuth", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserAuth", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserAuth findUnique
 */
export type UserAuthFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter, which UserAuth to fetch.
   */
  where: Prisma.UserAuthWhereUniqueInput
}

/**
 * UserAuth findUniqueOrThrow
 */
export type UserAuthFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter, which UserAuth to fetch.
   */
  where: Prisma.UserAuthWhereUniqueInput
}

/**
 * UserAuth findFirst
 */
export type UserAuthFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter, which UserAuth to fetch.
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAuths to fetch.
   */
  orderBy?: Prisma.UserAuthOrderByWithRelationInput | Prisma.UserAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAuths.
   */
  cursor?: Prisma.UserAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAuths.
   */
  distinct?: Prisma.UserAuthScalarFieldEnum | Prisma.UserAuthScalarFieldEnum[]
}

/**
 * UserAuth findFirstOrThrow
 */
export type UserAuthFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter, which UserAuth to fetch.
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAuths to fetch.
   */
  orderBy?: Prisma.UserAuthOrderByWithRelationInput | Prisma.UserAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserAuths.
   */
  cursor?: Prisma.UserAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAuths.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserAuths.
   */
  distinct?: Prisma.UserAuthScalarFieldEnum | Prisma.UserAuthScalarFieldEnum[]
}

/**
 * UserAuth findMany
 */
export type UserAuthFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter, which UserAuths to fetch.
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserAuths to fetch.
   */
  orderBy?: Prisma.UserAuthOrderByWithRelationInput | Prisma.UserAuthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserAuths.
   */
  cursor?: Prisma.UserAuthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserAuths from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserAuths.
   */
  skip?: number
  distinct?: Prisma.UserAuthScalarFieldEnum | Prisma.UserAuthScalarFieldEnum[]
}

/**
 * UserAuth create
 */
export type UserAuthCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * The data needed to create a UserAuth.
   */
  data: Prisma.XOR<Prisma.UserAuthCreateInput, Prisma.UserAuthUncheckedCreateInput>
}

/**
 * UserAuth createMany
 */
export type UserAuthCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserAuths.
   */
  data: Prisma.UserAuthCreateManyInput | Prisma.UserAuthCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserAuth createManyAndReturn
 */
export type UserAuthCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * The data used to create many UserAuths.
   */
  data: Prisma.UserAuthCreateManyInput | Prisma.UserAuthCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserAuth update
 */
export type UserAuthUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * The data needed to update a UserAuth.
   */
  data: Prisma.XOR<Prisma.UserAuthUpdateInput, Prisma.UserAuthUncheckedUpdateInput>
  /**
   * Choose, which UserAuth to update.
   */
  where: Prisma.UserAuthWhereUniqueInput
}

/**
 * UserAuth updateMany
 */
export type UserAuthUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserAuths.
   */
  data: Prisma.XOR<Prisma.UserAuthUpdateManyMutationInput, Prisma.UserAuthUncheckedUpdateManyInput>
  /**
   * Filter which UserAuths to update
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * Limit how many UserAuths to update.
   */
  limit?: number
}

/**
 * UserAuth updateManyAndReturn
 */
export type UserAuthUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * The data used to update UserAuths.
   */
  data: Prisma.XOR<Prisma.UserAuthUpdateManyMutationInput, Prisma.UserAuthUncheckedUpdateManyInput>
  /**
   * Filter which UserAuths to update
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * Limit how many UserAuths to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserAuth upsert
 */
export type UserAuthUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * The filter to search for the UserAuth to update in case it exists.
   */
  where: Prisma.UserAuthWhereUniqueInput
  /**
   * In case the UserAuth found by the `where` argument doesn't exist, create a new UserAuth with this data.
   */
  create: Prisma.XOR<Prisma.UserAuthCreateInput, Prisma.UserAuthUncheckedCreateInput>
  /**
   * In case the UserAuth was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserAuthUpdateInput, Prisma.UserAuthUncheckedUpdateInput>
}

/**
 * UserAuth delete
 */
export type UserAuthDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
  /**
   * Filter which UserAuth to delete.
   */
  where: Prisma.UserAuthWhereUniqueInput
}

/**
 * UserAuth deleteMany
 */
export type UserAuthDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserAuths to delete
   */
  where?: Prisma.UserAuthWhereInput
  /**
   * Limit how many UserAuths to delete.
   */
  limit?: number
}

/**
 * UserAuth without action
 */
export type UserAuthDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAuth
   */
  select?: Prisma.UserAuthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAuth
   */
  omit?: Prisma.UserAuthOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAuthInclude<ExtArgs> | null
}
